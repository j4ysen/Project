"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_hooks_1 = require("@testing-library/react-hooks");
var react_native_navigation_1 = require("react-native-navigation");
var _1 = require("./");
describe('useNavigationComponentDidAppear', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    var mockComponentType = 'Component';
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerComponentDidAppearListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidAppear(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toHaveBeenCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidAppear(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentId is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidAppear(mockHandler);
        }).result;
        var event1 = {
            componentId: 'COMPONENT_ID_1',
            componentName: 'COMPONENT_NAME_1',
            componentType: mockComponentType,
            passProps: {},
        };
        triggerEvent(event1);
        var event2 = {
            componentId: 'COMPONENT_ID_2',
            componentName: 'COMPONENT_NAME_2',
            componentType: mockComponentType,
            passProps: {},
        };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidAppear(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = {
            componentId: 'COMPONENT_ID_1',
            componentName: 'COMPONENT_NAME_1',
            componentType: mockComponentType,
            passProps: {},
        };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidAppear(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = {
            componentId: 'COMPONENT_ID_2',
            componentName: 'COMPONENT_NAME_2',
            componentType: mockComponentType,
            passProps: {},
        };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationComponentDidDisappear', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    var mockComponentType = 'Component';
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerComponentDidDisappearListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidDisappear(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toBeCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidDisappear(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentId is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidDisappear(mockHandler);
        }).result;
        var event1 = {
            componentId: 'COMPONENT_ID_1',
            componentName: 'COMPONENT_NAME_1',
            componentType: mockComponentType,
            passProps: {},
        };
        triggerEvent(event1);
        var event2 = {
            componentId: 'COMPONENT_ID_2',
            componentName: 'COMPONENT_NAME_2',
            componentType: mockComponentType,
            passProps: {},
        };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidDisappear(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = {
            componentId: 'COMPONENT_ID_1',
            componentName: 'COMPONENT_NAME_1',
            componentType: mockComponentType,
            passProps: {},
        };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationComponentDidDisappear(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = {
            componentId: 'COMPONENT_ID_2',
            componentName: 'COMPONENT_NAME_2',
            componentType: mockComponentType,
            passProps: {},
        };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationCommand', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerCommandListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationCommand(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toHaveBeenCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationCommand(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when commandName is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationCommand(mockHandler);
        }).result;
        triggerEvent('COMMAND_NAME_1', 'PARAMS_1');
        triggerEvent('COMMAND_NAME_2', 'PARAMS_2');
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, 'COMMAND_NAME_1', 'PARAMS_1');
        expect(mockHandler).toHaveBeenNthCalledWith(2, 'COMMAND_NAME_2', 'PARAMS_2');
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentName provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationCommand(mockHandler, 'COMMAND_NAME_2');
        }).result;
        triggerEvent('COMMAND_NAME_1', 'PARAMS_1');
        triggerEvent('COMMAND_NAME_2', 'PARAMS_2');
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toHaveBeenNthCalledWith(1, 'COMMAND_NAME_2', 'PARAMS_2');
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationCommand(mockHandler, 'COMMAND_NAME_2');
        }).result;
        triggerEvent('COMMAND_NAME_1', 'PARAMS_1');
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationCommandComplete', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerCommandCompletedListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationCommandComplete(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toBeCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationCommandComplete(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentName is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationCommandComplete(mockHandler);
        }).result;
        var event1 = { commandId: 'COMMAND_ID_1', commandName: 'COMMAND_NAME_1', params: {}, completionTime: 1 };
        triggerEvent(event1);
        var event2 = { commandId: 'COMMAND_ID_2', commandName: 'COMMAND_NAME_2', params: {}, completionTime: 2 };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentName provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationCommandComplete(mockHandler, 'COMMAND_NAME_1');
        }).result;
        var event = { commandId: 'COMMAND_ID_1', commandName: 'COMMAND_NAME_1', params: {}, completionTime: 1 };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentName does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationCommandComplete(mockHandler, 'COMMAND_NAME_1');
        }).result;
        var event = { commandId: 'COMMAND_ID_2', commandName: 'COMMAND_NAME_2', params: {}, completionTime: 1 };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationModalAttemptedToDismiss', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerModalAttemptedToDismissListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationModalAttemptedToDismiss(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toBeCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationModalAttemptedToDismiss(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentId is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationModalAttemptedToDismiss(mockHandler);
        }).result;
        var event1 = { componentId: 'COMPONENT_ID_1' };
        triggerEvent(event1);
        var event2 = { componentId: 'COMPONENT_ID_2' };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationModalAttemptedToDismiss(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_1' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationModalAttemptedToDismiss(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_2' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationScreenPop', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerScreenPoppedListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationScreenPop(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toBeCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationScreenPop(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentId is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationScreenPop(mockHandler);
        }).result;
        var event1 = { componentId: 'COMPONENT_ID_1' };
        triggerEvent(event1);
        var event2 = { componentId: 'COMPONENT_ID_2' };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationScreenPop(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_1' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationScreenPop(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_2' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationModalDismiss', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerModalDismissedListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationModalDismiss(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toBeCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationModalDismiss(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentId is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationModalDismiss(mockHandler);
        }).result;
        var event1 = { componentId: 'COMPONENT_ID_1', modalsDismissed: 1 };
        triggerEvent(event1);
        var event2 = { componentId: 'COMPONENT_ID_2', modalsDismissed: 1 };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationModalDismiss(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_1', modalsDismissed: 1 };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationModalDismiss(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_2', modalsDismissed: 1 };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationBottomTabSelect', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerBottomTabSelectedListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationBottomTabSelect(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toBeCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationBottomTabSelect(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationBottomTabSelect(mockHandler);
        }).result;
        var event1 = { selectedTabIndex: 1, unselectedTabIndex: 2 };
        triggerEvent(event1);
        var event2 = { selectedTabIndex: 1, unselectedTabIndex: 2 };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationBottomTabLongPress', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerBottomTabLongPressedListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationBottomTabLongPress(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toBeCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationBottomTabLongPress(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationBottomTabLongPress(mockHandler);
        }).result;
        var event1 = { selectedTabIndex: 1 };
        triggerEvent(event1);
        var event2 = { selectedTabIndex: 1 };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationButtonPress', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerNavigationButtonPressedListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationButtonPress(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toHaveBeenCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationButtonPress(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentId is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationButtonPress(mockHandler);
        }).result;
        var event1 = { componentId: 'COMPONENT_ID_1', buttonId: 'BUTTON_ID_1' };
        triggerEvent(event1);
        var event2 = { componentId: 'COMPONENT_ID_2', buttonId: 'BUTTON_ID_1' };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationButtonPress(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_1', buttonId: 'BUTTON_ID_1' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationButtonPress(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_2', buttonId: 'BUTTON_ID_1' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call the handler if buttonId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationButtonPress(mockHandler, undefined, 'BUTTON_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_1', buttonId: 'BUTTON_ID_1' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if buttonId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationButtonPress(mockHandler, undefined, 'BUTTON_ID_2');
        }).result;
        var event = { componentId: 'COMPONENT_ID_1', buttonId: 'BUTTON_ID_1' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call the handler only if componentId and buttonId matches', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationButtonPress(mockHandler, 'COMPONENT_ID_1', 'BUTTON_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_1', buttonId: 'BUTTON_ID_1' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationSearchBarUpdate', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerSearchBarUpdatedListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarUpdate(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toHaveBeenCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarUpdate(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentId is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarUpdate(mockHandler);
        }).result;
        var event1 = { componentId: 'COMPONENT_ID_1', text: 'TEXT_1', isFocused: true };
        triggerEvent(event1);
        var event2 = { componentId: 'COMPONENT_ID_2', text: 'TEXT_2', isFocused: false };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarUpdate(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_1', text: 'TEXT_1', isFocused: true };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarUpdate(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_2', text: 'TEXT_2', isFocused: true };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationSearchBarCancelPress', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerSearchBarCancelPressedListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarCancelPress(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toHaveBeenCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarCancelPress(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentId is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarCancelPress(mockHandler);
        }).result;
        var event1 = { componentId: 'COMPONENT_ID_1', componentName: 'COMPONENT_NAME_1' };
        triggerEvent(event1);
        var event2 = { componentId: 'COMPONENT_ID_2', componentName: 'COMPONENT_NAME_2' };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarCancelPress(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_1', componentName: 'COMPONENT_NAME_1' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationSearchBarCancelPress(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = { componentId: 'COMPONENT_ID_2', componentName: 'COMPONENT_NAME_2' };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
describe('useNavigationPreviewComplete', function () {
    var triggerEvent;
    var mockRemoveSubscription;
    var mockHandler;
    beforeEach(function () {
        mockHandler = jest.fn(function () { });
        mockRemoveSubscription = jest.fn();
        react_native_navigation_1.Navigation.events = jest.fn().mockReturnValue({
            registerPreviewCompletedListener: jest.fn(function (callback) {
                triggerEvent = callback;
                return { remove: mockRemoveSubscription };
            }),
        });
    });
    it('should remove the event listener on unmount', function () {
        var _a = react_hooks_1.renderHook(function () {
            _1.useNavigationPreviewComplete(function () { });
        }), result = _a.result, unmount = _a.unmount;
        unmount();
        expect(mockRemoveSubscription).toHaveBeenCalledTimes(1);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if no event was triggered', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationPreviewComplete(function () { });
        }).result;
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler twice when componentId is not provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationPreviewComplete(mockHandler);
        }).result;
        var event1 = {
            componentId: 'COMPONENT_ID_1',
            componentName: 'COMPONENT_NAME_1',
            previewComponentId: 'PREVIEW_COMPONENT_ID_1',
        };
        triggerEvent(event1);
        var event2 = {
            componentId: 'COMPONENT_ID_2',
            componentName: 'COMPONENT_NAME_2',
            previewComponentId: 'PREVIEW_COMPONENT_ID_2',
        };
        triggerEvent(event2);
        expect(mockHandler).toBeCalledTimes(2);
        expect(mockHandler).toHaveBeenNthCalledWith(1, event1);
        expect(mockHandler).toHaveBeenNthCalledWith(2, event2);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should call handler once if componentId provided', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationPreviewComplete(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = {
            componentId: 'COMPONENT_ID_1',
            componentName: 'COMPONENT_NAME_1',
            previewComponentId: 'PREVIEW_COMPONENT_ID_1',
        };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(1);
        expect(mockHandler).toBeCalledWith(event);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
    it('should never call the handler if componentId does not match', function () {
        var result = react_hooks_1.renderHook(function () {
            _1.useNavigationPreviewComplete(mockHandler, 'COMPONENT_ID_1');
        }).result;
        var event = {
            componentId: 'COMPONENT_ID_2',
            componentName: 'COMPONENT_NAME_2',
            previewComponentId: 'PREVIEW_COMPONENT_ID_2',
        };
        triggerEvent(event);
        expect(mockHandler).toBeCalledTimes(0);
        expect(result.current).toBeUndefined();
        expect(result.error).toBeUndefined();
    });
});
//# sourceMappingURL=index.test.js.map