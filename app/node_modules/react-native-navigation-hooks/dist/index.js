"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var react_native_navigation_1 = require("react-native-navigation");
function useNavigationComponentDidAppear(handler, componentId) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerComponentDidAppearListener(function (event) {
            var equalComponentId = event.componentId === componentId;
            if (componentId && !equalComponentId) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId]);
}
exports.useNavigationComponentDidAppear = useNavigationComponentDidAppear;
function useNavigationComponentDidDisappear(handler, componentId) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerComponentDidDisappearListener(function (event) {
            var equalComponentId = event.componentId === componentId;
            if (componentId && !equalComponentId) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId]);
}
exports.useNavigationComponentDidDisappear = useNavigationComponentDidDisappear;
function useNavigationCommand(handler, commandName) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerCommandListener(function (name, params) {
            var equalCommandName = name === commandName;
            if (commandName && !equalCommandName) {
                return;
            }
            handler(name, params);
        });
        return function () { return subscription.remove(); };
    }, [handler, commandName]);
}
exports.useNavigationCommand = useNavigationCommand;
function useNavigationCommandComplete(handler, commandName) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerCommandCompletedListener(function (event) {
            var equalCommandName = event.commandName === commandName;
            if (commandName && !equalCommandName) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, commandName]);
}
exports.useNavigationCommandComplete = useNavigationCommandComplete;
function useNavigationModalAttemptedToDismiss(handler, componentId) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerModalAttemptedToDismissListener(function (event) {
            var equalCommandId = event.componentId === componentId;
            if (componentId && !equalCommandId) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId]);
}
exports.useNavigationModalAttemptedToDismiss = useNavigationModalAttemptedToDismiss;
function useNavigationModalDismiss(handler, componentId) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerModalDismissedListener(function (event) {
            var equalComponentId = event.componentId === componentId;
            if (componentId && !equalComponentId) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId]);
}
exports.useNavigationModalDismiss = useNavigationModalDismiss;
function useNavigationScreenPop(handler, componentId) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerScreenPoppedListener(function (event) {
            var equalCommandId = event.componentId === componentId;
            if (componentId && !equalCommandId) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId]);
}
exports.useNavigationScreenPop = useNavigationScreenPop;
function useNavigationBottomTabSelect(handler) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerBottomTabSelectedListener(handler);
        return function () { return subscription.remove(); };
    }, [handler]);
}
exports.useNavigationBottomTabSelect = useNavigationBottomTabSelect;
function useNavigationBottomTabLongPress(handler) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerBottomTabLongPressedListener(handler);
        return function () { return subscription.remove(); };
    }, [handler]);
}
exports.useNavigationBottomTabLongPress = useNavigationBottomTabLongPress;
function useNavigationButtonPress(handler, componentId, buttonId) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerNavigationButtonPressedListener(function (event) {
            var equalComponentId = event.componentId === componentId;
            var equalButtonId = event.buttonId === buttonId;
            if ((componentId && !equalComponentId) || (buttonId && !equalButtonId)) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId, buttonId]);
}
exports.useNavigationButtonPress = useNavigationButtonPress;
function useNavigationSearchBarUpdate(handler, componentId) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerSearchBarUpdatedListener(function (event) {
            var equalComponentId = event.componentId === componentId;
            if (componentId && !equalComponentId) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId]);
}
exports.useNavigationSearchBarUpdate = useNavigationSearchBarUpdate;
function useNavigationSearchBarCancelPress(handler, componentId) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerSearchBarCancelPressedListener(function (event) {
            var equalComponentId = event.componentId === componentId;
            if (componentId && !equalComponentId) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId]);
}
exports.useNavigationSearchBarCancelPress = useNavigationSearchBarCancelPress;
function useNavigationPreviewComplete(handler, componentId) {
    react_1.useLayoutEffect(function () {
        var subscription = react_native_navigation_1.Navigation.events().registerPreviewCompletedListener(function (event) {
            var equalComponentId = event.componentId === componentId;
            if (componentId && !equalComponentId) {
                return;
            }
            handler(event);
        });
        return function () { return subscription.remove(); };
    }, [handler, componentId]);
}
exports.useNavigationPreviewComplete = useNavigationPreviewComplete;
//# sourceMappingURL=index.js.map